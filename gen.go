package main

import (
	"fmt"
	"log"
	"os"
)

var abbrevs = []struct {
	what        string
	replacement string
	charsback   int
}{
	{"aa", "append(,)", -2},
	{"tt", "t*testing.T", -1},

	{"ife", "if err != nil {\n\t\n\t}\n", -4},
	{"ie", "if err := ", 0},
	{";e", ";err != nil {\t\n\t\t\n\t}", -3},

	{"re", "return err", 0},
	{"rn", "return nil", 0},
	{"rw", "return errors.Wrap(err, \"\")", -2},
	{"tlf", "t.Logf(\"\",)", -3},
	{"tf", "t.Fatal(err)", 0},

	{"pp", "println(\"=== \")", -2},
	{"ff", "fmt.Printf(\"\",)", -3},
	{"fe", "fmt.Errorf(\"\",)", -3},
	{"fp", "fmt.Println()", -1},

	{"lp", "log.Println()", -1},
	{"lpf", "log.Printf(\"\",)", -3},
	{"lf", "log.Fatal()", -1},

	{"fu", "func () {\n}\n", -7},

	{"ss.", "strings", 1},
	{"ra", "ioutil.ReadAll()", -1},
	{"wa", "ioutil.WriteAll()", -1},
	{"rf", "ioutil.ReadFile(fname)", -1},
	{"wf", "ioutil.WriteFile(fname,,0600)", -6},
}

func main() {
	f, err := os.Create("abbrevs.lua")
	if err != nil {
		log.Fatal(err)
	}
	defer f.Close()

	fmt.Fprintln(f, "-- This file is generated by gen.go. Do not edit.")
	fmt.Fprintln(f, "-- Run `go run gen.go` to regenerate.")
	fmt.Fprintln(f)
	fmt.Fprintln(f, "function expand(str)")

	for _, a := range abbrevs {
		fmt.Fprintf(f, "\tif str == %q then\n", a.what)
		fmt.Fprintf(f, "\t\treturn %q, %d\n", a.replacement, a.charsback)
		fmt.Fprintln(f, "\tend")
	}

	fmt.Fprintf(f, "\treturn %q, 0\n", "")
	fmt.Fprintln(f, "end")
}
