-- This file is generated by gen.go. Do not edit.
-- Run `go run gen.go` to regenerate.

function expand(str)
	if str == "aa" then
		return "append(,)", -2
	end
	if str == "ife" then
		return "if err != nil {\n\t\n\t}\n", -4
	end
	if str == "ie" then
		return "if err := ", 0
	end
	if str == ";e" then
		return "err != nil {\t\n\t\t\n\t}", -3
	end
	if str == "re" then
		return "return err", 0
	end
	if str == "rf" then
		return "return fmt.Errorf(\": %w\", err)", -11
	end
	if str == "rn" then
		return "return nil", 0
	end
	if str == "ew" then
		return "errors.Wrap(err, \"\")", -2
	end
	if str == "pp" then
		return "println(\"=== \")", -2
	end
	if str == "pps" then
		return "println(\"=== \", fmt.Sprintf(\"%\",))", -4
	end
	if str == "fu" then
		return "func () {\n}\n", -7
	end
	if str == "tt" then
		return "func Test(t*testing.T)", -13
	end
	if str == "tl" then
		return "t.Log(\"\",)", -2
	end
	if str == "tlf" then
		return "t.Logf(\"\",)", -3
	end
	if str == "tf" then
		return "t.Fatal(err)", 0
	end
	if str == "ff" then
		return "fmt.Printf(\"\",)", -3
	end
	if str == "fff" then
		return "fmt.Fprintf(w, \"\",)", -3
	end
	if str == "ffp" then
		return "fmt.Fprintln(w, )", -1
	end
	if str == "sp" then
		return "fmt.Sprintf(\"\",)", -3
	end
	if str == "fe" then
		return "fmt.Errorf(\"\",)", -3
	end
	if str == "fp" then
		return "fmt.Println()", -1
	end
	if str == "lp" then
		return "log.Println()", -1
	end
	if str == "lpf" then
		return "log.Printf(\"\",)", -3
	end
	if str == "lf" then
		return "log.Fatal(err)", -1
	end
	if str == "ss." then
		return "strings.", 0
	end
	if str == "iora" then
		return "io.ReadAll()", -1
	end
	if str == "osrf" then
		return "os.ReadFile(fname)", -1
	end
	if str == "oswf" then
		return "os.WriteFile(fname,,0600)", -6
	end
	if str == "osc" then
		return "os.Create()", -1
	end
	if str == "oso" then
		return "os.Open()", -1
	end
	if str == "he" then
		return "http.Error(w, err.Error(), http.StatusInternalServerError)\nreturn\n", 0
	end
	if str == "hw" then
		return "w http.ResponseWriter", 0
	end
	if str == "hr" then
		return "r*http.Request", 0
	end
	if str == "hg" then
		return "\tresp, err := http.Get(\"url\")\n\tif err != nil {\n\t\treturn err\n\t}\n\tif resp.StatusCode != http.StatusOK {\n\t\treturn fmt.Errorf(\"status: %s\", resp.Status)\n\t}\n\n\tbuf, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\treturn err\n\t}\n\t_ = buf\n\treturn nil\n", 0
	end
	if str == "qsel" then
		return "SELECT *\nFROM\nWHERE\nGROUP BY\nORDER BY\nLIMIT 1000\n;\n", -1
	end
	if str == "zs" then
		return "zap.String(\"\", )", -4
	end
	if str == "zi" then
		return "zap.Int64(\"\", )", -4
	end
	if str == "ze" then
		return "zap.Error(err)", 0
	end
	return "", 0
end
